[
  {
    "name": "build.cmake_prefix_path",
    "value": [
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md",
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/debug",
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/share"
    ],
    "section": "core",
    "machine": "build",
    "type": "array",
    "description": "List of additional prefixes for cmake to search"
  },
  {
    "name": "build.pkg_config_path",
    "value": [
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/lib/pkgconfig",
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/share/pkgconfig"
    ],
    "section": "core",
    "machine": "build",
    "type": "array",
    "description": "List of additional paths for pkg-config to search"
  },
  {
    "name": "auto_features",
    "value": "auto",
    "section": "core",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Override value of all 'auto' features"
  },
  {
    "name": "backend",
    "value": "ninja",
    "section": "core",
    "machine": "any",
    "choices": [
      "ninja",
      "vs",
      "vs2010",
      "vs2012",
      "vs2013",
      "vs2015",
      "vs2017",
      "vs2019",
      "vs2022",
      "xcode",
      "none"
    ],
    "type": "combo",
    "description": "Backend to use"
  },
  {
    "name": "buildtype",
    "value": "debug",
    "section": "core",
    "machine": "any",
    "choices": [
      "plain",
      "debug",
      "debugoptimized",
      "release",
      "minsize",
      "custom"
    ],
    "type": "combo",
    "description": "Build type to use"
  },
  {
    "name": "cmake_prefix_path",
    "value": [
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md",
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/debug",
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/share"
    ],
    "section": "core",
    "machine": "host",
    "type": "array",
    "description": "List of additional prefixes for cmake to search"
  },
  {
    "name": "debug",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Enable debug symbols and other information"
  },
  {
    "name": "default_both_libraries",
    "value": "shared",
    "section": "core",
    "machine": "any",
    "choices": [
      "shared",
      "static",
      "auto"
    ],
    "type": "combo",
    "description": "Default library type for both_libraries"
  },
  {
    "name": "default_library",
    "value": "static",
    "section": "core",
    "machine": "any",
    "choices": [
      "shared",
      "static",
      "both"
    ],
    "type": "combo",
    "description": "Default library type"
  },
  {
    "name": "force_fallback_for",
    "value": [],
    "section": "core",
    "machine": "any",
    "type": "array",
    "description": "Force fallback for those subprojects"
  },
  {
    "name": "genvslite",
    "value": "vs2022",
    "section": "core",
    "machine": "any",
    "choices": [
      "vs2022"
    ],
    "type": "combo",
    "description": "Setup multiple buildtype-suffixed ninja-backend build directories, and a [builddir]_vs containing a Visual Studio meta-backend with multiple configurations that calls into them"
  },
  {
    "name": "install_umask",
    "value": 18,
    "section": "core",
    "machine": "any",
    "type": "integer",
    "description": "Default umask to apply on permissions of installed files"
  },
  {
    "name": "layout",
    "value": "mirror",
    "section": "core",
    "machine": "any",
    "choices": [
      "mirror",
      "flat"
    ],
    "type": "combo",
    "description": "Build directory layout"
  },
  {
    "name": "optimization",
    "value": "plain",
    "section": "core",
    "machine": "any",
    "choices": [
      "plain",
      "0",
      "g",
      "1",
      "2",
      "3",
      "s"
    ],
    "type": "combo",
    "description": "Optimization level"
  },
  {
    "name": "pkg_config_path",
    "value": [
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/lib/pkgconfig",
      "D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/share/pkgconfig"
    ],
    "section": "core",
    "machine": "host",
    "type": "array",
    "description": "List of additional paths for pkg-config to search"
  },
  {
    "name": "pkgconfig.relocatable",
    "value": true,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Generate pkgconfig files as relocatable"
  },
  {
    "name": "prefer_static",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to try static linking before shared linking"
  },
  {
    "name": "python.allow_limited_api",
    "value": true,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to allow use of the Python Limited API"
  },
  {
    "name": "python.bytecompile",
    "value": 0,
    "section": "core",
    "machine": "any",
    "type": "integer",
    "description": "Whether to compile bytecode"
  },
  {
    "name": "python.install_env",
    "value": "prefix",
    "section": "core",
    "machine": "any",
    "choices": [
      "auto",
      "prefix",
      "system",
      "venv"
    ],
    "type": "combo",
    "description": "Which python environment to install to"
  },
  {
    "name": "python.platlibdir",
    "value": "",
    "section": "core",
    "machine": "any",
    "type": "string",
    "description": "Directory for site-specific, platform-specific files."
  },
  {
    "name": "python.purelibdir",
    "value": "",
    "section": "core",
    "machine": "any",
    "type": "string",
    "description": "Directory for site-specific, non-platform-specific files."
  },
  {
    "name": "strip",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Strip targets on install"
  },
  {
    "name": "unity",
    "value": "off",
    "section": "core",
    "machine": "any",
    "choices": [
      "on",
      "off",
      "subprojects"
    ],
    "type": "combo",
    "description": "Unity build"
  },
  {
    "name": "unity_size",
    "value": 4,
    "section": "core",
    "machine": "any",
    "type": "integer",
    "description": "Unity block size"
  },
  {
    "name": "vsenv",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Activate Visual Studio environment"
  },
  {
    "name": "warning_level",
    "value": "1",
    "section": "core",
    "machine": "any",
    "choices": [
      "0",
      "1",
      "2",
      "3",
      "everything"
    ],
    "type": "combo",
    "description": "Compiler warning level to use"
  },
  {
    "name": "werror",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Treat warnings as errors"
  },
  {
    "name": "wrap_mode",
    "value": "nodownload",
    "section": "core",
    "machine": "any",
    "choices": [
      "default",
      "nofallback",
      "nodownload",
      "forcefallback",
      "nopromote"
    ],
    "type": "combo",
    "description": "Wrap mode"
  },
  {
    "name": "backend_max_links",
    "value": 0,
    "section": "backend",
    "machine": "any",
    "type": "integer",
    "description": "Maximum number of linker processes to run or 0 for no limit"
  },
  {
    "name": "b_ndebug",
    "value": "false",
    "section": "base",
    "machine": "any",
    "choices": [
      "true",
      "false",
      "if-release"
    ],
    "type": "combo",
    "description": "Disable asserts"
  },
  {
    "name": "b_pch",
    "value": true,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use precompiled headers"
  },
  {
    "name": "b_sanitize",
    "value": "none",
    "section": "base",
    "machine": "any",
    "choices": [
      "none",
      "address",
      "thread",
      "undefined",
      "memory",
      "leak",
      "address,undefined"
    ],
    "type": "combo",
    "description": "Code sanitizer to use"
  },
  {
    "name": "b_vscrt",
    "value": "md",
    "section": "base",
    "machine": "any",
    "choices": [
      "none",
      "md",
      "mdd",
      "mt",
      "mtd",
      "from_buildtype",
      "static_from_buildtype"
    ],
    "type": "combo",
    "description": "VS run-time library type to use."
  },
  {
    "name": "build.c_args",
    "value": [
      "-nologo",
      "-DWIN32",
      "-D_WINDOWS",
      "-utf-8",
      "-MP",
      "-MD",
      "-O2",
      "-Oi",
      "-Gy",
      "-DNDEBUG",
      "-Z7",
      "-ID:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/include"
    ],
    "section": "compiler",
    "machine": "build",
    "type": "array",
    "description": "Extra arguments passed to the c compiler"
  },
  {
    "name": "build.c_link_args",
    "value": [
      "-machine:x64",
      "-nologo",
      "-DEBUG",
      "-INCREMENTAL:NO",
      "-OPT:REF",
      "-OPT:ICF",
      "/LIBPATH:D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/lib"
    ],
    "section": "compiler",
    "machine": "build",
    "type": "array",
    "description": "Extra arguments passed to the c linker"
  },
  {
    "name": "build.c_std",
    "value": "none",
    "section": "compiler",
    "machine": "build",
    "choices": [
      "none",
      "c89",
      "c99",
      "c11",
      "c17",
      "c18"
    ],
    "type": "combo",
    "description": "C language standard to use"
  },
  {
    "name": "build.c_winlibs",
    "value": [
      "kernel32.lib",
      "user32.lib",
      "gdi32.lib",
      "winspool.lib",
      "shell32.lib",
      "ole32.lib",
      "oleaut32.lib",
      "uuid.lib",
      "comdlg32.lib",
      "advapi32.lib"
    ],
    "section": "compiler",
    "machine": "build",
    "type": "array",
    "description": "Windows libs to link against."
  },
  {
    "name": "build.cpp_args",
    "value": [
      "-nologo",
      "-DWIN32",
      "-D_WINDOWS",
      "-utf-8",
      "-GR",
      "-EHsc",
      "-MP",
      "-MD",
      "-O2",
      "-Oi",
      "-Gy",
      "-DNDEBUG",
      "-Z7",
      "-ID:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/include"
    ],
    "section": "compiler",
    "machine": "build",
    "type": "array",
    "description": "Extra arguments passed to the cpp compiler"
  },
  {
    "name": "build.cpp_eh",
    "value": "default",
    "section": "compiler",
    "machine": "build",
    "choices": [
      "none",
      "default",
      "a",
      "s",
      "sc"
    ],
    "type": "combo",
    "description": "C++ exception handling type."
  },
  {
    "name": "build.cpp_link_args",
    "value": [
      "-machine:x64",
      "-nologo",
      "-DEBUG",
      "-INCREMENTAL:NO",
      "-OPT:REF",
      "-OPT:ICF",
      "/LIBPATH:D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/lib"
    ],
    "section": "compiler",
    "machine": "build",
    "type": "array",
    "description": "Extra arguments passed to the cpp linker"
  },
  {
    "name": "build.cpp_rtti",
    "value": true,
    "section": "compiler",
    "machine": "build",
    "type": "boolean",
    "description": "Enable RTTI"
  },
  {
    "name": "build.cpp_std",
    "value": "c++11",
    "section": "compiler",
    "machine": "build",
    "choices": [
      "none",
      "none",
      "c++11",
      "vc++11",
      "c++14",
      "c++latest",
      "vc++latest",
      "vc++14",
      "c++17",
      "vc++17",
      "c++20",
      "vc++20"
    ],
    "type": "combo",
    "description": "C++ language standard to use"
  },
  {
    "name": "build.cpp_winlibs",
    "value": [
      "kernel32.lib",
      "user32.lib",
      "gdi32.lib",
      "winspool.lib",
      "shell32.lib",
      "ole32.lib",
      "oleaut32.lib",
      "uuid.lib",
      "comdlg32.lib",
      "advapi32.lib"
    ],
    "section": "compiler",
    "machine": "build",
    "type": "array",
    "description": "Windows libs to link against."
  },
  {
    "name": "c_args",
    "value": [
      "-nologo",
      "-DWIN32",
      "-D_WINDOWS",
      "-utf-8",
      "-MP",
      "-MD",
      "-O2",
      "-Oi",
      "-Gy",
      "-DNDEBUG",
      "-Z7",
      "-ID:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/include"
    ],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the c compiler"
  },
  {
    "name": "c_link_args",
    "value": [
      "-machine:x64",
      "-nologo",
      "-DEBUG",
      "-INCREMENTAL:NO",
      "-OPT:REF",
      "-OPT:ICF",
      "/LIBPATH:D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/lib"
    ],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the c linker"
  },
  {
    "name": "c_std",
    "value": "none",
    "section": "compiler",
    "machine": "host",
    "choices": [
      "none",
      "c89",
      "c99",
      "c11",
      "c17",
      "c18"
    ],
    "type": "combo",
    "description": "C language standard to use"
  },
  {
    "name": "c_winlibs",
    "value": [
      "kernel32.lib",
      "user32.lib",
      "gdi32.lib",
      "winspool.lib",
      "shell32.lib",
      "ole32.lib",
      "oleaut32.lib",
      "uuid.lib",
      "comdlg32.lib",
      "advapi32.lib"
    ],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Windows libs to link against."
  },
  {
    "name": "cpp_args",
    "value": [
      "-nologo",
      "-DWIN32",
      "-D_WINDOWS",
      "-utf-8",
      "-GR",
      "-EHsc",
      "-MP",
      "-MD",
      "-O2",
      "-Oi",
      "-Gy",
      "-DNDEBUG",
      "-Z7",
      "-ID:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/include"
    ],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the cpp compiler"
  },
  {
    "name": "cpp_eh",
    "value": "default",
    "section": "compiler",
    "machine": "host",
    "choices": [
      "none",
      "default",
      "a",
      "s",
      "sc"
    ],
    "type": "combo",
    "description": "C++ exception handling type."
  },
  {
    "name": "cpp_link_args",
    "value": [
      "-machine:x64",
      "-nologo",
      "-DEBUG",
      "-INCREMENTAL:NO",
      "-OPT:REF",
      "-OPT:ICF",
      "/LIBPATH:D:/Github/DSS/out/build/vcpkg_installed/x64-windows-static-md/lib"
    ],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the cpp linker"
  },
  {
    "name": "cpp_rtti",
    "value": true,
    "section": "compiler",
    "machine": "host",
    "type": "boolean",
    "description": "Enable RTTI"
  },
  {
    "name": "cpp_std",
    "value": "c++11",
    "section": "compiler",
    "machine": "host",
    "choices": [
      "none",
      "none",
      "c++11",
      "vc++11",
      "c++14",
      "c++latest",
      "vc++latest",
      "vc++14",
      "c++17",
      "vc++17",
      "c++20",
      "vc++20"
    ],
    "type": "combo",
    "description": "C++ language standard to use"
  },
  {
    "name": "cpp_winlibs",
    "value": [
      "kernel32.lib",
      "user32.lib",
      "gdi32.lib",
      "winspool.lib",
      "shell32.lib",
      "ole32.lib",
      "oleaut32.lib",
      "uuid.lib",
      "comdlg32.lib",
      "advapi32.lib"
    ],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Windows libs to link against."
  },
  {
    "name": "bindir",
    "value": "bin",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Executable directory"
  },
  {
    "name": "datadir",
    "value": "share",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Data file directory"
  },
  {
    "name": "includedir",
    "value": "include",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Header file directory"
  },
  {
    "name": "infodir",
    "value": "share/info",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Info page directory"
  },
  {
    "name": "libdir",
    "value": "lib",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Library directory"
  },
  {
    "name": "libexecdir",
    "value": "libexec",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Library executable directory"
  },
  {
    "name": "licensedir",
    "value": "",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Licenses directory"
  },
  {
    "name": "localedir",
    "value": "share/locale",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Locale data directory"
  },
  {
    "name": "localstatedir",
    "value": "var",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Localstate data directory"
  },
  {
    "name": "mandir",
    "value": "share/man",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Manual page directory"
  },
  {
    "name": "prefix",
    "value": "D:/Github/DSS/out/build/vcpkg_installed/vcpkg/pkgs/inih_x64-windows-static-md",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Installation prefix"
  },
  {
    "name": "sbindir",
    "value": "sbin",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "System executable directory"
  },
  {
    "name": "sharedstatedir",
    "value": "com",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Architecture-independent data directory"
  },
  {
    "name": "sysconfdir",
    "value": "etc",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Sysconf data directory"
  },
  {
    "name": "allow_no_value",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "allow name with no value"
  },
  {
    "name": "allow_realloc",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "allow initial malloc size to grow to max line length (when using the heap)"
  },
  {
    "name": "call_handler_on_new_section",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "call the handler each time a new section is encountered"
  },
  {
    "name": "distro_install",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "install shared libs, headers and pkg-config entries"
  },
  {
    "name": "initial_malloc_size",
    "value": 200,
    "section": "user",
    "machine": "any",
    "type": "integer",
    "description": "initial malloc size in bytes (when using the heap)"
  },
  {
    "name": "inline_comment_prefix",
    "value": ";",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "character(s) to start an inline comment (if enabled)"
  },
  {
    "name": "inline_comments",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "allow inline comments with the comment prefix character"
  },
  {
    "name": "max_line_length",
    "value": 200,
    "section": "user",
    "machine": "any",
    "type": "integer",
    "description": "maximum line length in bytes"
  },
  {
    "name": "multi-line_entries",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "support for multi-line entries in the style of Python's ConfigParser"
  },
  {
    "name": "report_line_numbers",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "report line number on ini_handler callback"
  },
  {
    "name": "start-of-line_comment_prefix",
    "value": ";#",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "character(s) to start a comment at the beginning of a line"
  },
  {
    "name": "stop_on_first_error",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "stop parsing after an error"
  },
  {
    "name": "use_heap",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "allocate memory on the heap using malloc instead using a fixed-sized line buffer on the stack"
  },
  {
    "name": "utf-8_bom",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "allow a UTF-8 BOM sequence (0xEF 0xBB 0xBF) at the start of INI files"
  },
  {
    "name": "with_INIReader",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "compile and (if selected) install INIReader"
  },
  {
    "name": "errorlogs",
    "value": true,
    "section": "test",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to print the logs from failing tests"
  },
  {
    "name": "stdsplit",
    "value": true,
    "section": "test",
    "machine": "any",
    "type": "boolean",
    "description": "Split stdout and stderr in test logs"
  }
]